<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>Eritque Arcus Math Notes</title>
      <link>https://ikuyo.dev/math-notes</link>
      <description>Last 10 notes on Eritque Arcus Math Notes</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Runge-Kutta method</title>
    <link>https://ikuyo.dev/math-notes/NumericalAnalysis/CH9/Runge-Kutta-method</link>
    <guid>https://ikuyo.dev/math-notes/NumericalAnalysis/CH9/Runge-Kutta-method</guid>
    <description>Definition can be either implicit or explicit y_{k + 1} = y_k + \int^{t_{k+1}}_{t_k} f(t,y)dt explicit RK4 the most common Runge-Kutta scheme, 4-th order y_{k + 1} = y_k + \frac{h_k}{6}(k_1 + k_2 + k_3 + k_4).</description>
    <pubDate>Tue, 13 May 2025 17:25:12 GMT</pubDate>
  </item><item>
    <title>readme</title>
    <link>https://ikuyo.dev/math-notes/NumericalAnalysis/readme</link>
    <guid>https://ikuyo.dev/math-notes/NumericalAnalysis/readme</guid>
    <description>This note is outcome of Spring 25 CS 450. Numerical Analysis in UIUC taught by instructor Paul Fischer.</description>
    <pubDate>Tue, 13 May 2025 17:22:26 GMT</pubDate>
  </item><item>
    <title>Backward Euler</title>
    <link>https://ikuyo.dev/math-notes/NumericalAnalysis/CH9/Backward-Euler</link>
    <guid>https://ikuyo.dev/math-notes/NumericalAnalysis/CH9/Backward-Euler</guid>
    <description>Definition a implicit method y_{k+1} = y_k + \Delta tf(t_{k+1},y_{k+1}) Stability unlike Forward Euler, It’s stable under any step h &gt; 0.</description>
    <pubDate>Tue, 13 May 2025 17:18:52 GMT</pubDate>
  </item><item>
    <title>Trapezoidal Rule</title>
    <link>https://ikuyo.dev/math-notes/NumericalAnalysis/CH9/Trapezoidal-Rule</link>
    <guid>https://ikuyo.dev/math-notes/NumericalAnalysis/CH9/Trapezoidal-Rule</guid>
    <description>Definition a implicit method y_{k + 1} = y_k + h\frac{f(t_k,y_k) + f(t_{k + 1}, y_{k + 1})}{2} Stability It’s sable if |\frac{1 + \frac{h\lambda}{2}}{1-\frac{h\lambda}{2}}| \leq 1 for every \lambda as Eigenvalue.</description>
    <pubDate>Tue, 13 May 2025 17:18:46 GMT</pubDate>
  </item><item>
    <title>Forward Euler</title>
    <link>https://ikuyo.dev/math-notes/NumericalAnalysis/CH9/Forward-Euler</link>
    <guid>https://ikuyo.dev/math-notes/NumericalAnalysis/CH9/Forward-Euler</guid>
    <description>Definition y_{k+1} = y_k + \Delta tf(t_k,y_k) when it’s linear, we can say y_{k + 1} = y_k + \Delta t\lambda y_k = y_k(1 + \Delta t\lambda) Stability It’s stable only if all \lambda: |1 + h\lambda_i| \leq 1.</description>
    <pubDate>Tue, 13 May 2025 11:31:29 GMT</pubDate>
  </item><item>
    <title>index</title>
    <link>https://ikuyo.dev/math-notes/NumericalAnalysis/CH9/</link>
    <guid>https://ikuyo.dev/math-notes/NumericalAnalysis/CH9/</guid>
    <description></description>
    <pubDate>Tue, 13 May 2025 11:22:23 GMT</pubDate>
  </item><item>
    <title>Gaussian Quadrature</title>
    <link>https://ikuyo.dev/math-notes/NumericalAnalysis/CH8/Gaussian-Quadrature</link>
    <guid>https://ikuyo.dev/math-notes/NumericalAnalysis/CH8/Gaussian-Quadrature</guid>
    <description>implementation evaluation first we need to transform from [-1,1] to [a,b] which required to update points and weights x_i = \frac{b-a}{2} \xi_i + \frac{a+b}{2} where x_i is the new mapped point and \xi_i is the old one w_i = \frac{b-a}{2}w_i I = \int^b_a f dx = \sum\frac{b-a}{2}w_if(x_i) exact for n...</description>
    <pubDate>Tue, 13 May 2025 11:16:00 GMT</pubDate>
  </item><item>
    <title>Newton-Cotes Quadrature</title>
    <link>https://ikuyo.dev/math-notes/NumericalAnalysis/CH8/Newton-Cotes-Quadrature</link>
    <guid>https://ikuyo.dev/math-notes/NumericalAnalysis/CH8/Newton-Cotes-Quadrature</guid>
    <description>implementation rules Midpoint rule M(f) = (b-a)f(\frac{a + b}{2}) Trapezoidal rule T(f) = \frac{b-a}{2}f(f(a) + f(b)) Simpson’s rule S(f) = \frac{b-a}{6}(f(a) + 5f(m) + f(b)) exact for n node up to n degree.</description>
    <pubDate>Tue, 13 May 2025 10:56:32 GMT</pubDate>
  </item><item>
    <title>Quadrature</title>
    <link>https://ikuyo.dev/math-notes/NumericalAnalysis/CH8/Quadrature</link>
    <guid>https://ikuyo.dev/math-notes/NumericalAnalysis/CH8/Quadrature</guid>
    <description>Concept basically \int^b_a f(x) = \sum_i^n w_i(x)f(x_i) stability upper bound |\Delta Q| \leq ||w||_1 \max|\Delta f_i| Implementation Newton-Cotes Quadrature use uniformly spaced nodes, Gaussian Quadrature use optimal picked nodes.</description>
    <pubDate>Tue, 13 May 2025 10:49:43 GMT</pubDate>
  </item><item>
    <title>basic difference</title>
    <link>https://ikuyo.dev/math-notes/NumericalAnalysis/CH8/basic-difference</link>
    <guid>https://ikuyo.dev/math-notes/NumericalAnalysis/CH8/basic-difference</guid>
    <description>General f&#039;(x) \approx c_1f(x + h) + c_2f(x) + c_3f(x - h) by Taylor expansion f(x + h) = f(x) + hf&#039;(x) + \frac{h^2}{2!}f&#039;&#039;(x) + \cdots + \frac{h^n}{n!}f^{(n)}(x) f(x - h) = f(x) - hf&#039;(x) + \frac{h^2}{2!}f&#039;&#039;(x) - \cdots + \frac{h^n}{n!}f^{(n)}(x) Forward difference ...</description>
    <pubDate>Tue, 13 May 2025 09:44:54 GMT</pubDate>
  </item>
    </channel>
  </rss>